% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/functions.R, R/query.R
\docType{package}
\name{query}
\alias{query}
\title{Read a query from a file or a string and execute it (or print instead).}
\usage{
query(conn, query, show_query = FALSE, ...)
}
\arguments{
\item{conn}{A DBI connection object obtained from \code{DBI::dbConnect()}).}

\item{query}{A path to a query file or a query string.}

\item{...}{Named parameters to pass to \code{glue::glue_sql()}).}
}
\value{
If \code{show_query = FALSE} (the default), a data frame.
If \code{show_query = TRUE}, a character vector of length 1.
}
\description{
Executes a parameterized query and returns the results as a data frame.
Optionally, the query can returned as a string instead (\code{show_query = TRUE}).
\code{\link{glue::glue_sql}} is used to interpolate variables. This is not as safe or efficient
as parameterized queries, but provides a consistent interface across SQL backends. Variables can
be read from the calling environment or passed directly using named parameters.

The query package provides two simple functions:
\code{query()} and get_queries(). These can be used together to make managing and
running SQL queries easy. Use \code{query()} to run SQL queries (as a string or stored in a file)
with interpolation provided by \code{glue::glue_sql()}. Use \code{get_queries()} to register a
directory of query files and run them using \code{query()}.
}
\examples{
con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
DBI::dbWriteTable(con, "iris", iris)
query(con, "select * from iris")

# Parameters can be passed from the global environment
val <- "setosa"
query(con, "select * from iris where species = {val}")

# Parameters can also be passed directly to query()
query(con, "select * from iris where species = {val}", val = "virginica")

# If you want to view the query without running it, use show_query = TRUE
# Note that parameters passed are used instead of global variables of the same name
query(con, "select * from iris where species = {val}", val = "virginica", show_query = TRUE)
}
