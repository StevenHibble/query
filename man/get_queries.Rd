% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/functions.R
\name{get_queries}
\alias{get_queries}
\title{Read a directory of queries into a single list.}
\usage{
get_queries(path = "", pattern = "\\\\.sql$")
}
\arguments{
\item{conn}{A DBI connection object obtained from \code{DBI::dbConnect()}).}

\item{query}{A string that is either the path to a query file or a query.}

\item{...}{Named parameters to pass to \code{glue::glue_sql()}).}
}
\value{
If \code{show_query = FALSE} (default), the query is executed. If \code{show_query = TRUE},
the query text is returned after parameters have been interpolated.
}
\description{
Given a connection and a query, the query is executed or printed (\code{show_query = TRUE}).
\code{\link{glue::glue_sql}} is used to interpolate variables. This is not as safe or efficient
as parameterized queries, but provides a consistent interface across all SQL backends. Variables can
be read from the calling environment or passed directly using named parameters.
}
\examples{
con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
DBI::dbWriteTable(con, "iris", iris)
query(con, "select * from iris")

# Parameters can be passed from the global environment
val <- "setosa"
query(con, "select * from iris where species = {val}")

# Parameters can also be passed directly to query()
query(con, "select * from iris where species = {val}", val = "virginica")

# If you want to view the query without running it, use show_query = TRUE
query(con, "select * from iris where species = {val}", val = "virginica", show_query = TRUE)
}
